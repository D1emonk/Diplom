import os
import cv2
import asyncio
import numpy as np
from ultralytics import YOLO
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from PIL import Image, ImageDraw, ImageFont

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ====
BOT_TOKEN = os.environ.get("BOT_TOKEN")
if BOT_TOKEN is None:
    raise ValueError("‚ö†Ô∏è –ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞! –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")

SAVE_DIR = "./telegram_predictions"
os.makedirs(SAVE_DIR, exist_ok=True)

# ==== –°–ª–æ–≤–∞—Ä—å –∫–ª–∞—Å—Å–æ–≤ GTSRB ====
CLASS_NAMES = {
    0: "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ (20 –∫–º/—á)",
    1: "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ (30 –∫–º/—á)",
    2: "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ (50 –∫–º/—á)",
    3: "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ (60 –∫–º/—á)",
    4: "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ (70 –∫–º/—á)",
    5: "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ (80 –∫–º/—á)",
    6: "–û—Ç–º–µ–Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (80 –∫–º/—á)",
    7: "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ (100 –∫–º/—á)",
    8: "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ (120 –∫–º/—á)",
    9: "–û–±–≥–æ–Ω –∑–∞–ø—Ä–µ—â–µ–Ω",
    10: "–û–±–≥–æ–Ω –≥—Ä—É–∑–æ–≤–∏–∫–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω",
    11: "–ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫ —Å–æ –∑–Ω–∞–∫–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞",
    12: "–ì–ª–∞–≤–Ω–∞—è –¥–æ—Ä–æ–≥–∞",
    13: "–£—Å—Ç—É–ø–∏ –¥–æ—Ä–æ–≥—É",
    14: "–°–¢–û–ü",
    15: "–î–≤–∏–∂–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ",
    16: "–î–≤–∏–∂–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤–∏–∫–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–æ",
    17: "–í—ä–µ–∑–¥ –∑–∞–ø—Ä–µ—â–µ–Ω",
    18: "–û–ø–∞—Å–Ω–æ—Å—Ç—å",
    19: "–û–ø–∞—Å–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞–ª–µ–≤–æ",
    20: "–û–ø–∞—Å–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞–ø—Ä–∞–≤–æ",
    21: "–î–≤–æ–π–Ω–æ–π –ø–æ–≤–æ—Ä–æ—Ç",
    22: "–ù–µ—Ä–æ–≤–Ω–∞—è –¥–æ—Ä–æ–≥–∞",
    23: "–°–∫–æ–ª—å–∑–∫–∞—è –¥–æ—Ä–æ–≥–∞",
    24: "–°—É–∂–µ–Ω–∏–µ –¥–æ—Ä–æ–≥–∏ —Å–ø—Ä–∞–≤–∞",
    25: "–î–æ—Ä–æ–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
    26: "–°–≤–µ—Ç–æ—Ñ–æ—Ä–Ω–æ–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ",
    27: "–ü–µ—à–µ—Ö–æ–¥–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥",
    28: "–î–µ—Ç–∏",
    29: "–í–µ–ª–æ—Å–∏–ø–µ–¥–∏—Å—Ç—ã",
    30: "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ: –ª—ë–¥/—Å–Ω–µ–≥",
    31: "–î–∏–∫–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ",
    32: "–û–∫–æ–Ω—á–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
    33: "–ü–æ–≤–æ—Ä–æ—Ç –Ω–∞–ø—Ä–∞–≤–æ",
    34: "–ü–æ–≤–æ—Ä–æ—Ç –Ω–∞–ª–µ–≤–æ",
    35: "–î–≤–∏–∂–µ–Ω–∏–µ –ø—Ä—è–º–æ",
    36: "–î–≤–∏–∂–µ–Ω–∏–µ –ø—Ä—è–º–æ –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–æ",
    37: "–î–≤–∏–∂–µ–Ω–∏–µ –ø—Ä—è–º–æ –∏–ª–∏ –Ω–∞–ª–µ–≤–æ",
    38: "–û–±—ä–µ–∑–¥ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è —Å–ø—Ä–∞–≤–∞",
    39: "–û–±—ä–µ–∑–¥ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è —Å–ª–µ–≤–∞",
    40: "–ö—Ä—É–≥–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ",
    41: "–ö–æ–Ω–µ—Ü –∑–æ–Ω—ã –æ–±–≥–æ–Ω–∞",
    42: "–ö–æ–Ω–µ—Ü –∑–æ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–∏—è –æ–±–≥–æ–Ω–∞ –≥—Ä—É–∑–æ–≤—ã–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º",
}

# ==== –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π ====
sign_classifier = YOLO("classific.pt")
sign_detector = YOLO("detector.pt")

# ==== –•—ç–Ω–¥–ª–µ—Ä—ã ====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç üëã –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –∑–Ω–∞–∫–∞, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å!"
    )

async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        file = await update.message.photo[-1].get_file()
        image_path = "input.jpg"
        await file.download_to_drive(image_path)
        image = cv2.imread(image_path)

        det_res = sign_detector.predict(image, verbose=False)
        detected_signs_list = []

        if det_res and len(det_res) > 0 and det_res[0].boxes is not None:
            boxes = det_res[0].boxes
            image_pil = Image.fromarray(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
            draw = ImageDraw.Draw(image_pil)

            try:
                font = ImageFont.truetype("DejaVuSans.ttf", 24)
            except:
                font = ImageFont.load_default()

            for i, box in enumerate(boxes):
                x1, y1, x2, y2 = map(int, box.xyxy[0])
                crop = image[y1:y2, x1:x2]
                if crop.size == 0:
                    continue

                cls_res = sign_classifier.predict(crop, task="classify", verbose=False)
                if cls_res and hasattr(cls_res[0], "probs") and cls_res[0].probs is not None:
                    label_idx = int(cls_res[0].probs.top1)
                    model_label_name = int(cls_res[0].names[label_idx])
                    label_name = CLASS_NAMES.get(model_label_name, f"–ö–ª–∞—Å—Å {model_label_name}")
                else:
                    label_name = "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ"

                detected_signs_list.append(label_name)
                draw.rectangle([(x1, y1), (x2, y2)], outline=(0, 255, 0), width=3)
                draw.text((x1, y1 - 25), label_name, font=font, fill=(0, 255, 0))

            image = cv2.cvtColor(np.array(image_pil), cv2.COLOR_RGB2BGR)

        output_path = "output.jpg"
        cv2.imwrite(output_path, image)

        if detected_signs_list:
            text = "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞–∫–∏: " + ", ".join(detected_signs_list)
        else:
            text = "–ó–Ω–∞–∫–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã"

        await update.message.reply_text(text)
        await update.message.reply_photo(photo=open(output_path, "rb"))

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

async def video_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        file = await update.message.video.get_file()
        input_path = "input.mp4"
        await file.download_to_drive(input_path)

        cap = cv2.VideoCapture(input_path)
        width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        fps = cap.get(cv2.CAP_PROP_FPS)

        fourcc = cv2.VideoWriter_fourcc(*"mp4v")
        output_path = "output.mp4"
        out = cv2.VideoWriter(output_path, fourcc, fps, (width, height))

        while True:
            ret, frame = cap.read()
            if not ret:
                break

            det_res = sign_detector.predict(frame, verbose=False)
            if det_res and len(det_res) > 0 and det_res[0].boxes is not None:
                boxes = det_res[0].boxes
                frame_pil = Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
                draw = ImageDraw.Draw(frame_pil)
                font = ImageFont.truetype("arial.ttf", 20)

                for box in boxes:
                    x1, y1, x2, y2 = map(int, box.xyxy[0])
                    crop = frame[y1:y2, x1:x2]
                    if crop.size == 0:
                        continue

                    cls_res = sign_classifier.predict(crop, task="classify", verbose=False)
                    if cls_res and hasattr(cls_res[0], "probs") and cls_res[0].probs is not None:
                        label_idx = int(cls_res[0].probs.top1)
                        model_label_name = int(cls_res[0].names[label_idx])
                        label_name = CLASS_NAMES.get(model_label_name, f"–ö–ª–∞—Å—Å {model_label_name}")
                    else:
                        label_name = "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ"

                    draw.rectangle([(x1, y1), (x2, y2)], outline=(0, 255, 0), width=3)
                    draw.text((x1, y1 - 25), label_name, font=font, fill=(255, 0, 0))

                frame = cv2.cvtColor(np.array(frame_pil), cv2.COLOR_RGB2BGR)

            out.write(frame)

        cap.release()
        out.release()
        await update.message.reply_video(video=open(output_path, "rb"))

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {e}")

# ==== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ====
if __name__ == "__main__":
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, photo_handler))
    app.add_handler(MessageHandler(filters.VIDEO, video_handler))

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫
    asyncio.run(app.run_polling())
